import math

import numpy as np
import torchvision.models as models
from torch.nn import Parameter
import torch
import torch.nn as nn

from model import MSFN


def gen_A(num_classes, t, adj_file):
    import pickle
    result = pickle.load(open(adj_file, 'rb'))
    _adj = result['adj']
    _nums = result['nums']
    _nums = _nums[:, np.newaxis]
    _adj = _adj / _nums
    _adj[_adj < t] = 0
    _adj[_adj >= t] = 1
    _adj = _adj * 0.25 / (_adj.sum(0, keepdims=True) + 1e-6)
    _adj = _adj + np.identity(num_classes, int)
    return _adj

def gen_adj(A):
    D = torch.pow(A.sum(1).float(), -0.5)
    D = torch.diag(D)
    adj = torch.matmul(torch.matmul(A, D).t(), D)
    return adj
class GraphConvolution(nn.Module):

    def __init__(self, in_features, out_features, bias=False):
        super(GraphConvolution, self).__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.weight = Parameter(torch.Tensor(in_features, out_features))
        if bias:
            self.bias = Parameter(torch.Tensor(1, 1, out_features))
        else:
            self.register_parameter('bias', None)
        self.reset_parameters()

    def reset_parameters(self):
        stdv = 1. / math.sqrt(self.weight.size(1))
        self.weight.data.uniform_(-stdv, stdv)
        if self.bias is not None:
            self.bias.data.uniform_(-stdv, stdv)

    def forward(self, input, adj):

        output = torch.matmul(adj, self.weight)

        if self.bias is not None:
            return output + self.bias
        else:
            return output

    def __repr__(self):
        return self.__class__.__name__ + ' (' \
               + str(self.in_features) + ' -> ' \
               + str(self.out_features) + ')'


class MSFCLNet(nn.Module):
    def __init__(self, num_classes=20, in_channel=20, t=0.4, adj_file='data/voc/voc_adj.pkl'):
        super(MSFCLNet, self).__init__()
        self.features = MSFN().features
        self.num_classes = num_classes
        self.pooling = nn.AdaptiveAvgPool2d(output_size=(1, 1))
        self.gc1 = GraphConvolution(in_channel, 20)
        self.gc2 = GraphConvolution(20, 352)
        self.relu = nn.LeakyReLU(0.2)
        # A
        _adj = gen_A(num_classes, t, adj_file)
        # self.A = Parameter(torch.tensor(_adj, dtype=torch.float32))
        self.A = Parameter(torch.from_numpy(_adj).clone().detach().requires_grad_(True).to(torch.float32))
        self.classifier = nn.Sequential(
            nn.Dropout(0.2),
            nn.Linear(20, num_classes)
        )
    def forward(self, feature):
        feature = self.features(feature)
        feature = self.pooling(feature)
        feature = feature.view(feature.size(0), -1)

        adj = gen_adj(self.A).detach()
        x = self.gc1(feature,adj)
        x = self.relu(x)
        x = self.gc2(x, adj)

        x = x.transpose(0, 1)
        output = torch.matmul(feature, x)
        output = self.classifier(output)
        return output





