class MSCLNetet(nn.Module):
    def __init__(self, num_classes=7, in_channel=7, t=0, adj_file='./0311adj.pkl'):
        super(MSCLNetet, self).__init__()
        self.features = MSFN().features
        self.num_classes = num_classes
        self.pooling = nn.AdaptiveAvgPool2d(output_size=(1, 1))
        self.gc1 = GraphConvolution(in_channel, 7)
        self.gc2 = GraphConvolution(7, 352)
        self.relu = nn.LeakyReLU(0.2)
        _adj = gen_A(num_classes, t, adj_file)
        self.A = Parameter(torch.from_numpy(_adj).clone().detach().requires_grad_(True).to(torch.float32))
        self.classifier = nn.Sequential(
            nn.Dropout(0.2),
            nn.Linear(7, num_classes)
        )
    def forward(self, feature):
        feature = self.features(feature)
        feature = self.pooling(feature)
        feature = feature.view(feature.size(0), -1)

        adj = gen_adj(self.A).detach()
        x = self.gc1(feature,adj)
        x = self.relu(x)
        x = self.gc2(x, adj)

        x = x.transpose(0, 1)
        output = torch.matmul(feature, x)
        output = self.classifier(output)
        return output
